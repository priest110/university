// generate a random permutation that will serve as an initial
// solution to the problem
int** initial_solution(size_t N)
{
    srand(time(NULL));

    size_t n2 = N >> 1;

    int** rand_perm = (int**)malloc(sizeof(int*) * n2);

    for(unsigned i = 0; i < n2; i++)
    {
        rand_perm[i] = (int*)malloc(sizeof(int) * 2);

        rand_perm[i][0] = -1;
        rand_perm[i][1] = i;
    }

    for(unsigned i = 0; i < N; i++){
        int x = rand() % n2;
        int y = rand() % 2;

        while(rand_perm[x][y] != -1)
            x = rand() % n2;

        rand_perm[x][y] = i;
    }

    return rand_perm;
}


                                  //0  1  2  3  4  5  6  7
    int D[TEST_SIZE][TEST_SIZE] = { { 0, 1, 2, 3, 4, 5, 6, 7 }, //0
                                    { 1, 0, 3, 123, 5, 6, 7, 8 }, //1
                                    { 2, 3, 0, 5, 6, 70, 8, 9}, //2
                                    { 3,123, 5, 0, 7, 8, 9, 10}, //3
                                    { 4, 5, 6, 7, 0, 9,10, 11}, //4
                                    { 5, 6, 70, 8, 9, 0,11,12}, //5
                                    { 6, 7, 8, 9,10,11, 0, 89}, //6
                                    { 7, 8, 9,10,11,12,89, 0 } };//7



                                //0  1  2  3  4  5  6  7
    int D[TEST_SIZE][TEST_SIZE] = { { 0, 1, 2, 3, 4, 5, 6, 7 }, //0
                                    { 1, 0, 3, 4, 5, 6, 7, 8 }, //1
                                    { 2, 3, 0, 5, 6, 70, 8, 9}, //2
                                    { 3, 4, 5, 0, 7, 8, 9, 10}, //3
                                    { 4, 5, 6, 7, 0, 9,10, 11}, //4
                                    { 5, 6, 70, 8, 9, 0,11,12}, //5
                                    { 6, 7, 8, 9,10,11, 0, 13}, //6
                                    { 7, 8, 9,10,11,12,13, 0 } };//7