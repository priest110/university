//
// /home/ruizinho/Desktop/Universidade/Mestrado/CPD/ESC/tracer/build-vscode/__unspec__/Debug/src/CMakeFiles/ESCViewer2021.dir//tracer_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_varying_vec3__
#define __ISPC_STRUCT_varying_vec3__
__ISPC_ALIGNED_STRUCT__(32) varying_vec3 {
    __ISPC_ALIGN__(32) float v[3][8];
};
#endif

#ifndef __ISPC_STRUCT_triangle__
#define __ISPC_STRUCT_triangle__
__ISPC_ALIGNED_STRUCT__(32) triangle {
    struct varying_vec3 vertices[3];
    __ISPC_ALIGN__(32) int32_t primID[8];
    __ISPC_ALIGN__(32) int32_t geomID[8];
};
#endif

#ifndef __ISPC_STRUCT_uniform_vec3__
#define __ISPC_STRUCT_uniform_vec3__
struct uniform_vec3 {
    float v[3];
};
#endif

#ifndef __ISPC_STRUCT_ray__
#define __ISPC_STRUCT_ray__
__ISPC_ALIGNED_STRUCT__(32) ray {
    struct uniform_vec3 ori;
    struct uniform_vec3 dir;
    __ISPC_ALIGN__(32) float t[8];
    __ISPC_ALIGN__(32) float u[8];
    __ISPC_ALIGN__(32) float v[8];
    __ISPC_ALIGN__(32) int32_t geomID[8];
    __ISPC_ALIGN__(32) int32_t primID[8];
    __ISPC_ALIGN__(32) bool valido[8];
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern bool ispc_intersect(struct triangle &tri, struct ray &r);
    extern bool ispc_occlusion(struct triangle &tri, struct ray &r, int32_t h, int32_t w);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
